name: register_lookup_value
type: processor
status: beta
description: register a value which can be retrieved later on

fields: 
  - name: redis
    type: string
    description: the redis url to use
  - name: prefix
    type: string
    default: "values"
    description: the prefix to use for the keys in redis
  - name: key_field
    type: string
    default: "key"
    description: the dot path to the field containing the key
  - name: data_field
    type: string
    default: "data"
    description: the dot path to the field containing the data
  - name: concept_field
    type: string
    default: "concept"
    description: the dot path to the field containing the concept

mapping: |-
  map set_value {
    let pref = if this.prefix != null && this.prefix != "" {
      this.prefix + ":"
    } else {
      ""
    }
  
    root.redis.url = this.redis
    root.redis.command = "set"
    root.redis.args_mapping = """
  root = [
    "%[1]s%%s:%%s".format(this.concept.id, this.key),
    this.data.format_json()
  ]""".format($pref)
  }
  
  map link_register_value {
    root.branch.request_map = """root.key = this.get(%[1]q)
  root.data = this.get(%[2]q)
  root.concept = this.get(%[3]q)""".format(this.key_field, this.data_field, this.concept_field)
  
    root.branch.processors = [
      this.apply("set_value")
    ]
  }
  
  root = this.apply("link_register_value")

tests:
  - name: Should generate template
    config:
      redis: redis://localhost:6379/2
    expected:
      branch:
        request_map: |- 
          root.key = this.get("key")
          root.data = this.get("data")
          root.concept = this.get("concept")
        processors:
          - redis:
              url: redis://localhost:6379/2
              command: set
              args_mapping: |-
                root = [
                  "values:%s:%s".format(this.concept.id, this.key),
                  this.data.format_json()
                ]