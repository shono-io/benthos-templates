name: register_link
type: processor
status: beta
description: register a link

fields: 
  - name: redis
    type: string
    description: the redis url to use
  - name: prefix
    type: string
    default: "links"
    description: the prefix to use for the keys in redis

mapping: |-
  map add_link {
    let pref = if this.prefix != null && this.prefix != "" {
      this.prefix + ":"
    } else {
      ""
    }
  
    root.redis.url = this.redis
    root.redis.command = "sadd"
    root.redis.args_mapping = """
  root = [
    "%s%%s:%%s".format(this.to.concept, this.to.key),
    this.format_json()
  ]""".format($pref)
  }
  
  map validate_link {
     root = """
  root = if !this.exists("from.concept") || !this.exists("from.key") || !this.exists("as") || !this.exists("to.concept") || !this.exists("to.key") {
    throw("invalid link format %s".format(this.format_json(no_indent: true)))
  } else {
    this
  }"""
  }
  
  map link_register {
    root.branch.request_map = this.apply("validate_link") 
    root.branch.processors = [
      this.apply("add_link")
    ]
  }
  
  root = this.apply("link_register")

tests:
  - name: Should generate template
    config:
      redis: redis://localhost:6379/2
    expected:
      branch:
        request_map: |-
          root = if !this.exists("from.concept") || !this.exists("from.key") || !this.exists("as") || !this.exists("to.concept") || !this.exists("to.key") {
            throw("invalid link format %s".format(this.format_json(no_indent: true)))
          } else {
            this
          }
        processors:
          - redis:
              url: redis://localhost:6379/2
              command: sadd
              args_mapping: |-
                root = [
                  "links:%s:%s".format(this.to.concept, this.to.key),
                  this.format_json()
                ]