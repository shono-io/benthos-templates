name: map_concept
type: processor
status: beta
summary: |-
    Map the concept and validate the outcome to be valid shono data

fields:
  - name: data_field
    type: string
    default: "data"
    description: the dot path to the field containing the data to map
  - name: concept_field
    type: string
    default: concept
    description: the dot path to the field containing the concept
  - name: timestamp_field
    type: string
    default: timestamp
    description: the dot path to the field containing the event timestamp
  - name: result_map
    type: string
    default: root = this
    description: the mapping to execute once the concept mapping has succeeded

mapping: |-
  map request_mapping {
    root = """root.key = this.key
  root.data = this.get(%[1]q)
  root.concept = this.get(%[2]q)
  root.timestamp = this.get(%[3]q)""".format(this.data_field, this.concept_field, this.timestamp_field)
  }
  
  map detection_mapping {
    root.mapping = """let data = this.data.bloblang(this.concept.mapping)

  root = {}

  # throw an exception if the _key field is missing
  root.data = $data
  root.data._key = if root.exists("data._key") { root.data._key } else {this.key}

  # set the timestamp to the event's timestamp if none was set as part of the mapping
  root.data."_timestamp" = if $data.get("_timestamp") == null { 
    this.timestamp 
  } else { 
    $data.get("_timestamp") 
  }

  root.links = this.concept.links.or([]).map_each(link -> {
    "from": { "concept": this.concept.id, "key": root.data._key },
    "to": { "concept": link.concept, "key": root.data.get(link.field) },
    "as": link.as
  })"""
  }
  
  map map_concept {
    root.branch.processors = [
      this.apply("detection_mapping")
    ]
    root.branch.result_map = this.result_map
    root.branch.request_map = this.apply("request_mapping")
  }
  
  root = this.apply("map_concept")

tests:
  - name: Should generate template
    config: {}
    expected:
      branch:
        request_map: |-
          root.key = this.key
          root.data = this.get("data")
          root.concept = this.get("concept")
          root.timestamp = this.get("timestamp")
        processors:
          - mapping: |-
              let data = this.data.bloblang(this.concept.mapping)
              
              root = {}
              
              # throw an exception if the _key field is missing
              root.data = $data
              root.data._key = if root.exists("data._key") { root.data._key } else {this.key}
              
              # set the timestamp to the event's timestamp if none was set as part of the mapping
              root.data."_timestamp" = if $data.get("_timestamp") == null { 
                this.timestamp 
              } else { 
                $data.get("_timestamp") 
              }
              
              root.links = this.concept.links.or([]).map_each(link -> {
                "from": { "concept": this.concept.id, "key": root.data._key },
                "to": { "concept": link.concept, "key": root.data.get(link.field) },
                "as": link.as
              })
        result_map: root = this