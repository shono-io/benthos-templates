name: lookup_link_values
type: processor
status: beta
description: lookup the values of all provided links

fields: 
  - name: redis
    type: string
    description: the redis url to use
  - name: links_prefix
    type: string
    default: "links"
    description: the prefix to use for the link keys in redis
  - name: values_prefix
    type: string
    default: "values"
    description: the prefix to use for the value keys in redis

mapping: |-
  map add_link {
    let pref = if this.links_prefix != null && this.links_prefix != "" {
      this.links_prefix + ":"
    } else {
      ""
    }
  
    root.redis.url = this.redis
    root.redis.command = "sadd"
    root.redis.args_mapping = """
  root = [
    "%s%%s:%%s".format(this.to.concept, this.to.key),
    this.format_json()
  ]""".format($pref)
  }
  
  map get_link {
    let pref = if this.values_prefix != null && this.values_prefix != "" {
      this.values_prefix + ":"
    } else {
      ""
    }
  
    root.redis.url = this.redis
    root.redis.command = "get"
    root.redis.args_mapping = """
  root = [
    "%s%%s:%%s".format(this.to.concept, this.to.key)
  ]""".format($pref)
  }
  
  map validate_link {
     root = """
  root = if this.link.from.concept == null || this.link.from.key == null || this.link.as == null || this.link.to.concept == null || this.link.to.key == null {
    throw("invalid link format for %s".format(this.format_json(no_indent: true)))
  } else {
    this
  }"""
  }
  
  map link_register {
    root.branch.request_map = this.apply("validate_link") 
    root.branch.processors = [
      this.apply("add_link")
    ]
  }
  
  map link_value_lookup {
    root.branch.request_map = this.apply("validate_link") 
    root.branch.processors = [
      this.apply("get_link")
    ]
    root.branch.result_map = """
  root.value = this"""
  }
  
  root.branch.processors = [
    {"unarchive": {"format": "json_array"}},
    this.apply("link_register"),
    this.apply("link_value_lookup"),
    {"archive": {"format": "json_array"}}
  ]
  
  root.branch.request_map = """root = if this.links.length() == 0 { 
    deleted() 
  } else {
    this.links
  }"""
  
  root.branch.result_map = """
  root.resolved = this.map_each(item -> {item.as: item.value}).squash()"""

tests:
  - name: Should generate template
    config:
      redis: redis://localhost:6379/2
    expected:
      branch:
        request_map: |-
          root = if this.links.length() == 0 { 
            deleted() 
          } else {
            this.links
          }

        processors:
          # For each link we will register the link in the links cache and retrieve the actual value
          # for the reference from the cache. Only if a reference is found, the event will be updated
          # with the resolved value.
          - unarchive:
              format: json_array

          # register the reference in the links cache
          - branch:
              request_map: |-
                root = if this.link.from.concept == null || this.link.from.key == null || this.link.as == null || this.link.to.concept == null || this.link.to.key == null {
                  throw("invalid link format for %s".format(this.format_json(no_indent: true)))
                } else {
                  this
                }
              processors:
                - redis:
                    url: redis://localhost:6379/2
                    command: sadd
                    args_mapping: |-
                      root = [
                        "links:%s:%s".format(this.to.concept, this.to.key),
                        this.format_json()
                      ]

          # get the item from the cache
          - branch:
              request_map: |-
                root = if this.link.from.concept == null || this.link.from.key == null || this.link.as == null || this.link.to.concept == null || this.link.to.key == null {
                  throw("invalid link format for %s".format(this.format_json(no_indent: true)))
                } else {
                  this
                }
              processors:
                - redis:
                    url: redis://localhost:6379/2
                    command: get
                    args_mapping: |-
                      root = [
                        "values:%s:%s".format(this.to.concept, this.to.key)
                      ]
              result_map: |-
                root.value = this

          - archive:
              format: json_array

        result_map: |-
          root.resolved = this.map_each(item -> {item.as: item.value}).squash()