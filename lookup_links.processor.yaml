name: lookup_links
type: processor
status: beta
description: Get all links for a given concept and key

fields: 
  - name: redis
    type: string
    description: the redis url to use

  - name: concept_field
    type: string
    default: "concept.id"
    description: the dot path to the field containing the concept identifier for which to lookup the links

  - name: key_field
    type: string
    default: "data._key"
    description: the dot path to the field containing key for which to lookup the links

  - name: prefix
    type: string
    default: "links"
    description: the prefix to use for the keys in redis

  - name: result_map
    type: string
    default: root = this
    description: the result mapping to use

mapping: |-
  map get_links {
    let pref = if this.prefix != null && this.prefix != "" {
      this.prefix + ":"
    } else {
      ""
    }
  
    root.redis.url = this.redis
    root.redis.command = "smembers"
    root.redis.args_mapping = """
  root = ["%[1]s%%s:%%s".format(this.concept, this.key)]""".format($pref)
  }
  
  map links_lookup {
    root.branch.request_map = """root.key = this.get(%[1]q)
  root.concept = this.get(%[2]q)""".format(this.key_field, this.concept_field)
  
    root.branch.processors = [
      this.apply("get_links"),
      {"mapping": "root = this.map_each(item -> item.parse_json())"}
    ]
    root.branch.result_map = this.result_map
  }
  
  root = this.apply("links_lookup")

tests:
  - name: Should generate template
    config:
      redis: redis://localhost:6379/2
    expected:
      branch:
        request_map: |-
          root.key = this.get("data._key")
          root.concept = this.get("concept.id")
        processors:
          - redis:
              url: redis://localhost:6379/2
              command: smembers
              args_mapping: root = ["links:%s:%s".format(this.concept, this.key)]
          - mapping: |-
              root = this.map_each(item -> item.parse_json())
        result_map: root = this

  - name: Should generate template with specified concept and key fields
    config:
      redis: redis://localhost:6379/2
      concept_field: "my_concept.id"
      key_field: "my_data._key"
    expected:
      branch:
        request_map: |-
          root.key = this.get("my_data._key")
          root.concept = this.get("my_concept.id")
        processors:
          - redis:
              url: redis://localhost:6379/2
              command: smembers
              args_mapping: root = ["links:%s:%s".format(this.concept, this.key)]
          - mapping: |-
              root = this.map_each(item -> item.parse_json())
        result_map: root = this

  - name: Should generate template with result map
    config:
      redis: redis://localhost:6379/2
      result_map: root.resolved = this
    expected:
      branch:
        request_map: |-
          root.key = this.get("data._key")
          root.concept = this.get("concept.id")
        processors:
          - redis:
              url: redis://localhost:6379/2
              command: smembers
              args_mapping: root = ["links:%s:%s".format(this.concept, this.key)]
          - mapping: |-
              root = this.map_each(item -> item.parse_json())
        result_map: root.resolved = this