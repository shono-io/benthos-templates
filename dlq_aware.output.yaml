name: dlq_aware
type: output
status: beta

fields:
  - name: output
    type: unknown
    description: the output to use for the main event

  - name: key
    type: string
    default: "meta(\"io.shono.key\")"
    description: the dot path to the field to use as the document id
  - name: brokers
    kind: list
    type: string
    default: ""
    description: the kafka brokers to connect to
  - name: username
    type: string
    default: ""
    description: the username to use for authentication
  - name: password
    type: string
    default: ""
    description: the password to use for authentication
  - name: headers
    type: string
    description: the inclusion pattern to use for metadata
    default: ".*"
  - name: reject_on_error
    type: bool
    default: false
    description: whether to reject the message on error


mapping: |-
  map dlq {
    let app = env("APP_ID") 
    let brokers = if this.brokers.or([]).length() == 0 { env("BACKBONE_KAFKA_URL").or("").split(",") } else { this.brokers }
    let username = if this.username == "" { env("BACKBONE_KAFKA_USERNAME") } else { this.username }
    let password = if this.password == "" { env("BACKBONE_KAFKA_PASSWORD") } else { this.password }
  
    root.label = "dlq"
    root.kafka_franz.seed_brokers = $brokers
    root.kafka_franz.sasl = [
      {
        "mechanism": "PLAIN",
        "username": $username,
        "password": $password
      }
    ]
    root.kafka_franz.tls.enabled = true
    root.kafka_franz.topic = "dlq"
    root.kafka_franz.metadata.include_patterns = [ this.headers ]
    root.kafka_franz.key = "${!%s}".format(this.key)
  
    root.processors = []
    root.processors."-".mapping = """root.app = %q
  root.error = error()
  root.code = @err_code
  root.meta = @ 
  root.payload = this""".format($app)
  
    root.processors."-".metric = {
      "type": "counter",
      "name": "death_letter_sent",
      "labels": {
        "app": $app,
        "code": "${! meta(\"err_code\").or(\"GENERIC_ERROR\") }"
      }
    }
  
    root.processors."-".log = {"level": "WARN", "message": "sending error to DLQ: ${!error()}"}
  }
  
  map error_output {
    root = if this.reject_on_error {
      this.apply("broker_error_output")
    } else {
      this.apply("dlq")
    }
  }
  
  map broker_error_output {
    root.broker.pattern = "fan_out"
    root.broker.outputs = [
      this.apply("dlq"),
      { "label": "reject", "reject": "Unable to process message: ${! error() }" }
    ]
  }
  
  root.switch.cases = []
  root.switch.cases."-".check = "errored() && meta(\"err_code\") != \"DEPENDENCY_NOT_FOUND\""
  root.switch.cases.0.output = this.apply("error_output")
  
  root.switch.cases."-".check = "errored() && meta(\"err_code\") == \"DEPENDENCY_NOT_FOUND\""
  root.switch.cases.1.output = { "label": "dependency_not_found", "reject": "${! error() }" }
  
  root.switch.cases."-".output = this.output
  root.switch.cases.2.output.label = "output"
  


tests:
  - name: Should use configured fields
    config:
      key: this.id
      brokers:
        - localhost:9092
      username: kafka
      password: changeme
      output:
        stdout: { }
    expected:
      switch:
        cases:
          - check: errored() && meta("err_code") != "DEPENDENCY_NOT_FOUND"
            output:
              label: dlq
              kafka_franz:
                seed_brokers:
                  - localhost:9092
                sasl:
                  - mechanism: PLAIN
                    username: kafka
                    password: changeme
                tls:
                  enabled: true
                topic: dlq
                metadata:
                  include_patterns:
                    - ".*"
                key: "${!this.id}"
              processors:
                - mapping: |-
                    root.app = "my-app"
                    root.error = error()
                    root.code = @err_code
                    root.meta = @ 
                    root.payload = this
                - metric:
                    type: counter
                    name: "death_letter_sent"
                    labels:
                      app: "my-app"
                      code: ${! meta("err_code").or("GENERIC_ERROR") }
                - log:
                    level: WARN
                    message: "sending error to DLQ: ${!error()}"
          - check: errored() && meta("err_code") == "DEPENDENCY_NOT_FOUND"
            output:
              label: dependency_not_found
              reject: "${! error() }"
          - output:
              label: output
              stdout: { }

  - name: Should fall back to environment variables if config not defined
    config:
      output:
        stdout: { }
    expected:
      switch:
        cases:
          - check: errored() && meta("err_code") != "DEPENDENCY_NOT_FOUND"
            output:
              label: dlq
              kafka_franz:
                seed_brokers:
                  - my-kafka-broker:9092
                sasl:
                  - mechanism: PLAIN
                    username: kafka_username
                    password: kafka_password
                tls:
                  enabled: true
                topic: dlq
                metadata:
                  include_patterns:
                    - ".*"
                key: "${!meta(\"io.shono.key\")}"
              processors:
                - mapping: |-
                    root.app = "my-app"
                    root.error = error()
                    root.code = @err_code
                    root.meta = @ 
                    root.payload = this
                - metric:
                    type: counter
                    name: "death_letter_sent"
                    labels:
                      app: "my-app"
                      code: ${! meta("err_code").or("GENERIC_ERROR") }
                - log:
                    level: WARN
                    message: "sending error to DLQ: ${!error()}"
          - check: errored() && meta("err_code") == "DEPENDENCY_NOT_FOUND"
            output:
              label: dependency_not_found
              reject: "${! error() }"
          - output:
              label: output
              stdout: { }

  - name: Should Reject if requested so
    config:
      reject_on_error: true
      output:
        stdout: {}
    expected:
      switch:
        cases:
          - check: errored() && meta("err_code") != "DEPENDENCY_NOT_FOUND"
            output:
              broker:
                pattern: fan_out
                outputs:
                  - label: dlq
                    kafka_franz:
                      seed_brokers:
                        - my-kafka-broker:9092
                      sasl:
                        - mechanism: PLAIN
                          username: kafka_username
                          password: kafka_password
                      tls:
                        enabled: true
                      topic: dlq
                      metadata:
                        include_patterns:
                          - ".*"
                      key: "${!meta(\"io.shono.key\")}"
                    processors:
                      - mapping: |-
                          root.app = "my-app"
                          root.error = error()
                          root.code = @err_code
                          root.meta = @ 
                          root.payload = this
                      - metric:
                          type: counter
                          name: "death_letter_sent"
                          labels:
                            app: "my-app"
                            code: ${! meta("err_code").or("GENERIC_ERROR") }
                      - log:
                          level: WARN
                          message: "sending error to DLQ: ${!error()}"
                  - label: reject
                    reject: "Unable to process message: ${! error() }"
          - check: errored() && meta("err_code") == "DEPENDENCY_NOT_FOUND"
            output:
              label: dependency_not_found
              reject: "${! error() }"

          - output:
              label: output
              stdout: {}