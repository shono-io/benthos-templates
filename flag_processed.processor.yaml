name: flag_processed
type: processor
status: beta

fields:
  - name: concept
    type: string
    description: the concept of the current message
  - name: key
    type: string
    description: the expression to retrieve the key from the current message

  - name: redis
    type: string
    default: ""
    description: the redis url to use
  - name: scope
    type: string
    default: ""
    description: the processing scope

mapping: |-
  map kv_set {
    let redis = if this.redis == "" { env("REDIS_URL") } else { this.redis }
    let scope = if this.scope == "" { env("APP_SCOPE") } else { this.scope }
  
    root.label = "flag_%s_as_processed".format(this.concept)
    root.redis.url = $redis
    root.redis.command = "set"
    root.redis.args_mapping = """root = [
    "%s:dependencies:%s:%%s".format(%s.escape_url_query()),
    now()
  ]""".format($scope, this.concept, this.key)
  }
  
  root.branch.processors = []
  root.branch.processors."-" = this.apply("kv_set")

tests:
  - name: Should use configured fields
    config:
      redis: redis://my-other-redis-server:6379
      scope: "my-other-scope"
      concept: "account"
      key: "this.AccountId"
    expected:
      branch:
        processors:
          - label: flag_account_as_processed
            redis:
              url: redis://my-other-redis-server:6379
              command: set
              args_mapping: |-
                root = [
                  "my-other-scope:dependencies:account:%s".format(this.AccountId.escape_url_query()),
                  now()
                ]
  - name: Should fall back to environment vars when config not specified
    config:
      concept: "account"
      key: "this.AccountId"
    expected:
      branch:
        processors:
          - label: flag_account_as_processed
            redis:
              url: redis://my-redis-server:6379
              command: set
              args_mapping: |-
                root = [
                  "my-scope:dependencies:account:%s".format(this.AccountId.escape_url_query()),
                  now()
                ]