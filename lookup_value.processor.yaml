name: lookup_value
type: processor
status: beta
description: look for a value in redis

fields: 
  - name: redis
    type: string
    description: the redis url to use
  - name: prefix
    type: string
    default: "values"
    description: the prefix to use for the keys in redis
  - name: concept_field
    type: string
    default: "concept"
    description: the dot path to the field holding the concept identifier
  - name: key_field
    type: string
    default: "key"
    description: the dot path to the field holding the key identifier
  - name: result_map
    type: string
    default: |-
      root = this
    description: the mapping to use to map the result of the redis lookup

mapping: |-
  map get_link {
    let pref = if this.prefix != null && this.prefix != "" {
      this.prefix + ":"
    } else {
      ""
    }
  
    root.redis.url = this.redis
    root.redis.command = "get"
    root.redis.retries = 0
    root.redis.args_mapping = """
  root = [
    "%s%%s:%%s".format(this.concept, this.key)
  ]""".format($pref)
  }
  
  map link_value_lookup {
    root.branch.request_map = """
  root.concept = this.get(%[1]q)
  root.key = this.get(%[2]q)
  root = if root.exists("key") && root.key != null {
    root
  } else {
    deleted()
  }""".format(this.concept_field, this.key_field)
  
    root.branch.processors = [ 
      {
        "try": [
          {"log": {
            "level": "DEBUG",
            "message": "get ${! \"values:%s:%s\".format(this.concept, this.key)}"
          }},
          this.apply("get_link"),
          {"mapping": "root = this.parse_json()"}
        ]
      },
      {
        "catch": [
          {"mapping": "root = null"}
        ]
      }
    ]
    root.branch.result_map = this.result_map
  }
  
  root = this.apply("link_value_lookup")

tests:
  - name: Should generate template
    config:
      redis: redis://localhost:6379/2
    expected:
      branch:
        request_map: |-
          root.concept = this.get("concept")
          root.key = this.get("key")
          root = if root.exists("key") && root.key != null {
            root
          } else {
            deleted()
          }
        processors:
          - try:
            - log:
                level: DEBUG
                message: "get ${! \"values:%s:%s\".format(this.concept, this.key)}"
            - redis:
                url: redis://localhost:6379/2
                command: get
                retries: 0
                args_mapping: |-
                  root = [
                    "values:%s:%s".format(this.concept, this.key)
                  ]

            - mapping: root = this.parse_json()

          - catch:
            - mapping: root = null

        result_map: |-
          root = this